<?php namespace $NAMESPACE$;

use App\Http\Requests;
use $MODEL_NAMESPACE$;
use Illuminate\Http\Request;
use BaseController;
use Mitul\Generator\Utils\ResponseManager;
use Response;
use Gondolyn;

class $MODEL_NAME$APIController extends BaseController
{
    public function __construct()
    {
        $this->middleware('cors');
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @return Response
     */
    public function index(Request $request)
    {
        $input = $request->all();

        $result = $this->$MODEL_NAME_CAMEL$Repository->search($input);

        $$MODEL_NAME_PLURAL_CAMEL$ = $result[0];

        $data = ResponseManager::makeResult($$MODEL_NAME_PLURAL_CAMEL$->toArray());
        $data['message'] = "$MODEL_NAME_PLURAL$ retrieved successfully.";

        return Gondolyn::response("success", $data);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Request $request
     *
     * @return Response
     */
    public function store(Request $request)
    {
        if(sizeof($MODEL_NAME$::$rules) > 0)
            $this->validateRequest($request, $MODEL_NAME$::$rules);

        $input = $request->all();

        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::create($input);

        $data = ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray());
        $data['message'] = "$MODEL_NAME_PLURAL$ saved successfully.";

        return Gondolyn::response("success", $data);
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int  $id
     * @param Request $request
     *
     * @return Response
     */
    public function show($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if(empty($$MODEL_NAME_CAMEL$))
            $this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);

        $data = ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray());
        $data['message'] = "$MODEL_NAME_PLURAL$ retrieved successfully.";

        return Gondolyn::response("success", $data);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int  $id
     * @return Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function update($id, Request $request)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if(empty($$MODEL_NAME_CAMEL$))
            $this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);

        $input = $request->all();

        $$MODEL_NAME_CAMEL$->fill($input);
        $$MODEL_NAME_CAMEL$->save();

        $data = ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray());
        $data['message'] = "$MODEL_NAME_PLURAL$ updated successfully.";

        return Gondolyn::response("success", $data);
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function destroy($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if(empty($$MODEL_NAME_CAMEL$))
            $this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);

        $$MODEL_NAME_CAMEL$->delete();

        $data = ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray());
        $data['message'] = "$MODEL_NAME_PLURAL$ deleted successfully.";

        return Gondolyn::response("success", $data);
    }

}
