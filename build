<?php

/**
 * build
 *
 * Build is a tool for generating a build tracking number for PHP projects.
 * This allows for better release tracking and issue handling.
 *
 * @package     build
 * @author      Matt Lantz
 * @copyright   Copyright (c) 2014 Matt Lantz
 *
 */

    /**
     *
     */
    class semanticPHP {

        public function __construct($config)
        {
            date_default_timezone_set("America/New_York");

            $this->buildFile    = $config->buildFile;
            $this->author       = $config->buildAuthor;
            $this->type         = $config->buildType;
            $this->incType      = $config->buildIncType;
            $this->message      = $config->buildMessage;
        }

        private function getCommitHash()
        {
            exec("git log --name-status HEAD^..HEAD", $gitStatus);

            $commitHash = str_replace("commit ", "", $gitStatus[0]);

            return $commitHash;
        }

        private function tagGIT($version, $buildData)
        {
            exec("git tag -a v".$version." -m '".$this->message."'");
            exec("git commit -am 'Build update'");
        }

        private function appendBuildDoc($buildData)
        {
            $buildFile = $this->buildFile;

            $builds = json_decode(file_get_contents($buildFile));

            if (is_null($builds))
            {
                $builds = array();
                $version = "0.0.0";
            }
            else
            {
                $latestBuild = end($builds);
                $version = $latestBuild->version;
            }

            $thisBuild = new stdClass;
            $thisBuild->commit = $buildData["commit"];
            @$thisBuild->build = time().'-'.$buildData["type"];
            $thisBuild->builder = $buildData["builder"];
            $thisBuild->date = date("Y-m-d");

            $version = explode(".", $version);

            switch ($this->incType)
            {
                case 'major':
                    $version[0]++;
                    $version[1] = 0;
                    $version[2] = 0;
                    break;

                case 'minor':
                    $version[1]++;
                    $version[2] = 0;
                    break;

                case 'patch':
                    $version[2]++;
                    break;

                default:
                    $version[2]++;
                    break;
            }

            $newVersion = implode(".", $version);
            $thisBuild->version = $newVersion;

            array_push($builds, $thisBuild);

            $buildFileData = json_encode($builds);

            if (file_put_contents($buildFile, $buildFileData))
            {
                $this->tagGIT($newVersion, $thisBuild);

                return true;
            }

            return false;
        }

        public function main()
        {
            $commitHash = $this->getCommitHash();

            $buildData = array(
                "commit" => $commitHash,
                "type" => $this->type,
                "builder" => $this->author,
                "message" => $this->message
            );

            $this->appendBuildDoc($buildData);
        }

    }

    /*
    |--------------------------------------------------------------------------
    | Build the Application
    |--------------------------------------------------------------------------
    */

    $buildType      = $argv[1];
    $buildAuthor    = $argv[2];
    $buildIncType   = $argv[3];
    $buildMessage   = $argv[4];

    if (! $buildType || ! $buildAuthor || ! $buildIncType || ! $buildMessage)
    {
        echo "php build \n<build-type (release|dev|experiment)> \n<build-author (name)> \n<build-increment (major|minor|patch)>\n <build-message>\n";
        echo "The version will automatically be generated based on the increment you state in the build statement, and GIT will be tagged\n";
        exit;
    }

    $config = new stdClass;
    $config->buildFile = "./build.json";
    $config->buildType = $buildType;
    $config->buildAuthor = $buildAuthor;
    $config->buildIncType = $buildIncType;
    $config->buildMessage = $buildMessage;

    $build = new semanticPHP($config);
    $build->main();

?>